[{"objectID":"e00e6ca6c6ddd427124511b02ed72822daeb22b2","permalink":"/post/%E4%BB%8Ejava%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B3-%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"从java入门编程(3)-变量与数据类型","content":" 解释代码 public class App { public static void main(String[] args) throws Exception { System.out.println(\u0026amp;#34;Hello, World!\u0026amp;#34;); } } 这段是项目初始代码,这些代码没学过的应该不知道什么意思,但是不需要在意.\n循序渐进即可.\n我们重点关注这行代码:System.out.println(\u0026amp;ldquo;Hello, World!\u0026amp;rdquo;);\n这行代码的作用是输出 Hello, World!\n也就是说System.out.println(); 这行代码的作用就是输出括号里的值\n然后要知道注释\npublic class App { public static void main(String[] args) throws Exception { System.out.println(\u0026amp;#34;Hello, World!\u0026amp;#34;); //此处添加了注释 } } // 是单行注释(除了单行注释还有多行注释)\n写注释的作用是和记笔记一样,为了程序员能够更好地理解代码,//后面的内容会被编译器忽略\n在生成的class文件不会有注释的存在\n声明变量 类似数学题,设一个x为3:\n这其实就相当于我们声明了一个变量x,并且让x=3.那么java里是怎么做的呢?\n在java声明变量的格式是这样的:\u0026amp;lt;数据类型\u0026amp;gt; \u0026amp;lt;变量名\u0026amp;gt;=\u0026amp;lt;值\u0026amp;gt;; 注意要加分号,这是一条语句结束的标志,不加运行会报错.\nint x=3; 这就表明我们声明一个整数变量x,并且赋值为3\nint表示整数数据类型,关于数据类型后面会讲详细概念,现在知道什么意思就可以\n数字有了,一行字怎么办?\n用String类型:\nString y = \u0026amp;ldquo;ni好1314\u0026amp;rdquo;; 这行语句便是声明字符串变量y,并且赋值为 ni好1314\n需要特别说明,字符串的数字这个说法,大家可以理解成中文里的 一三一四 这个形式,也就说 1314 和 \u0026amp;ldquo;1314\u0026amp;rdquo; 完全是两个概念,前者是个整数,后者是一行字.\n将代码改成下面这样.\npublic class App { public static void main(String[] args) …","date":"2025-06-01 08:00:00","updated":"2025-06-01 08:00:00"},{"objectID":"dc87e1da10cac5f55e81cb6b416ae475795f5bc2","permalink":"/post/%E4%BB%8Ejava%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B2-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/","title":"从java入门编程(2)-程序执行流程","content":" 运行流程 下面的内容有些词听不懂没关系,只要明白是一些jdk文件夹里的程序在起作用即可. 当我们点击右上角的小三角后\nVSCode检测Java环境 VSCode 会通过配置的 JDK 环境变量来确认 Java 开发环境是否可用。也就是vscode会优先从系统变量里找javahome(大小写无所谓)变量,但是我们并没有配置,先前只是配置path变量里的可执行文件路径而已,所以我们手动在vscode的设置里配置了javahome的路径. 如果环境变量配置有问题，VSCode 会提示你重新配置 JDK 路径。(也就是报错)\nJava 扩展包的作用 Language Support for Java：这个扩展包会为 Java 文件提供语法高亮、代码补全、错误检查等功能。 Java Extension Pack：它是一个扩展包集合，通常包括调试工具、依赖管理工具(如 Maven 或 Gradle)等。 当你点击运行按钮时，这些扩展包会协同工作，确保代码能够正确编译和运行。\n编译 Java 文件 VSCode 会调用 JDK 中的 javac.exe(Java 编译器) 来编译你的 .java 文件。\n编译过程会检查代码的语法错误、类型错误等，并生成 .class 文件(字节码文件)，这是 Java 程序运行的基础。 .class文件在vscode默认是生成在项目根目录的bin文件夹下,其他编辑器位置可能不同.在项目的.vscode文件夹下有个settings.json文件,在这里为这个java项目做一些单独的配置\n{ \u0026amp;#34;java.project.sourcePaths\u0026amp;#34;: [\u0026amp;#34;src\u0026amp;#34;], \u0026amp;#34;java.project.outputPath\u0026amp;#34;: \u0026amp;#34;bin\u0026amp;#34;, \u0026amp;#34;java.project.referencedLibraries\u0026amp;#34;: [ \u0026amp;#34;lib/**/*.jar\u0026amp;#34; ] } 运行 Java 程序 编译完成后，VSCode 会通过 java.exe 启动 Java 虚拟机(JVM)，并加载生成的 .class 文件。 如果你的程序中有 main 方法，JVM 会从该方法开始执行程序。\n输出结果 程序的输出会显示在 VSCode 的终端或输出窗口中。你可以看到程序的运行结果、打印的调试信息 …","date":"2025-05-29 08:00:00","updated":"2025-05-29 08:00:00"},{"objectID":"76910e965474989800d9894b61f540c5764aa276","permalink":"/post/%E4%BB%8Ejava%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B1-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/","title":"从java入门编程(1)-配置环境","content":" 配置java环境 jdk有很多版本,对教学来说区别甚微\n以openjdk17作为java环境\n从清华源镜像下载jdk 将下载的zip解压,我喜欢用一个目录专门存放开发环境和工具\n电脑小白可以去看下windows教程\n然后win+s搜索环境变量\n然后将jdk文件夹bin的目录路径拷贝 之后必须一直点确定否则环境变量不会设置成功\n后面win+r输入cmd 如果没有显示可以重启一次\n解释操作 我们大抵做了两个操作\n我们首先下载解压了openjdk17 配置了环境变量 jdk即Java Development Kit(Java软件开发工具包),没有jdk我们就运行不了java代码\n环境变量是什么? 举个例子,在中学做有关圆的题目时,往往题目后面有: (设Π近似为3.14)\n所以你就知道了Π=3.14\n设置环境变量也就是告诉windows系统设置了一个特殊的值,并且这个值可以是数字,一行文字,但一般是一个文件夹路径\n你可以看到系统变量窗口下有很多变量,而我们则是选中Path变量并新增了一个新值,这里必须要注意系统自带的变量大多只有一个值,而某些变量比较特殊可以有多个值,比如我们选中的Path变量,Path变量规定了命令行界面(也就是那个cmd黑窗口,能通过一些指令对系统做些操作)可执行文件(.exe文件之类的)的搜索路径\n我们在命令行输入 java -version 实际是系统通过Path变量里我们设置的路径(如D:\\Dev\\jdk-17.0.15+6\\bin)找到了java.exe(在cmd里可以一般省略.exe后缀)这个程序 并且执行了java.exe,而 -version 则是对启动java.exe的启动参数(不知道什么意思没关系)\n配置编辑器 接下来我们点击链接下载vscode\nvscode是一个代码编辑器可以通过安装插件扩展功能 打开安装包在一直下一步到这个界面 然后重启vscode就变成中文了\n之后搜索java下载这个插件\n后面安装下图流程点击并配置vscode的设置 此处配置javahome与先前配置环境变量同理,只不过是为在vscode安装的java扩展包配置jdk路径\n记得按crtl+s保存,上方的标签左边如果有小白点说明没保存\n我们随意新建一个文件夹,把这个文件夹拖进vscode窗口 弹出界面直接点这个即可 输入项目名字然后按Enter 会跳出一个新 …","date":"2025-04-20 08:00:00","updated":"2025-04-20 08:00:00"},{"objectID":"4bc3fdc62f74b9818e8baec25b252e8b5b882964","permalink":"/post/%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/","title":"常用依赖","content":" \u0026lt;properties\u0026gt; \u0026lt;mybatis.version\u0026gt;3.0.4\u0026lt;/mybatis.version\u0026gt; \u0026lt;pagehelper.version\u0026gt;2.1.0\u0026lt;/pagehelper.version\u0026gt; \u0026lt;hutool-all.version\u0026gt;5.8.38\u0026lt;/hutool-all.version\u0026gt; \u0026lt;springdoc.version\u0026gt;2.8.8\u0026lt;/springdoc.version\u0026gt; \u0026lt;spring-admin.version\u0026gt;3.5.0\u0026lt;/spring-admin.version\u0026gt; \u0026lt;sa-token.version\u0026gt;1.43.0\u0026lt;/sa-token.version\u0026gt; \u0026lt;sa-token-jwt.version\u0026gt;1.43.0\u0026lt;/sa-token-jwt.version\u0026gt; \u0026lt;sms4j.version\u0026gt;3.3.5\u0026lt;/sms4j.version\u0026gt; \u0026lt;simple-java-mail.version\u0026gt;8.12.6\u0026lt;/simple-java-mail.version\u0026gt; \u0026lt;easy-captcha.version\u0026gt;1.6.2\u0026lt;/easy-captcha.version\u0026gt; \u0026lt;amqp-client.version\u0026gt;5.25.0\u0026lt;/amqp-client.version\u0026gt; \u0026lt;minio.version\u0026gt;8.5.17\u0026lt;/minio.version\u0026gt; \u0026lt;redisson.version\u0026gt;3.46.0\u0026lt;/redisson.version\u0026gt; \u0026lt;lock4j.version\u0026gt;2.2.7\u0026lt;/lock4j.version\u0026gt; \u0026lt;logstash.version\u0026gt;8.1\u0026lt;/logstash.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- Spring Boot 核心依赖 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-aop\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-validation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 数据库相关 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-j\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mybatis.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.pagehelper\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pagehelper-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${pagehelper.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 缓存与消息队列 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-redis\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 开发工具 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${hutool-all.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springdoc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springdoc-openapi-starter-webmvc-ui\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${springdoc.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 监控与管理 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;de.codecentric\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-admin-starter-server\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-admin.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;de.codecentric\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-admin-starter-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-admin.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 安全与权限 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.dev33\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sa-token-spring-boot3-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${sa-token.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.dev33\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sa-token-jwt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${sa-token-jwt.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 短信 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.dromara.sms4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sms4j-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${sms4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 邮箱 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.simplejavamail\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;simple-java-mail\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${simple-java-mail.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 验证码 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.whvcse\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;easy-captcha\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${easy-captcha.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.rabbitmq\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;amqp-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${amqp-client.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.minio\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;minio\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${minio.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.redisson\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;redisson-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${redisson.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lock4j-redisson-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${lock4j.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;net.logstash.logback\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;logstash-logback-encoder\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${logstash.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-elasticsearch\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; --\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; ","date":"2024-06-29 08:00:00","updated":"2024-06-29 08:00:00"},{"objectID":"d816e61f68a40460d3cbf372c3fd238fec2e5a7d","permalink":"/post/springboot%E5%AE%9A%E5%88%B6%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E6%96%B9%E6%B3%95/","title":"springboot定制日期格式方法","content":" 1. 全局配置（application.properties/yml） 适用场景：统一整个应用的日期格式\n支持的格式：java.util.Date、java.time.*(如LocalDateTime)（需额外配置）\n# 设置全局日期格式（针对JSON序列化） spring.jackson.date-format=yyyy-MM-dd HH:mm:ss spring.jackson.time-zone=GMT+8 # 设置时区 # 针对Java 8日期类型（如LocalDateTime）需关闭时间戳格式 spring.jackson.serialization.write-dates-as-timestamps=false 2. 使用@JsonFormat注解 适用场景：针对特定字段定制序列化格式\n支持类型：Date、Calendar、java.time.*\npublic class User { @JsonFormat(pattern = \u0026#34;yyyy/MM/dd\u0026#34;, timezone = \u0026#34;Asia/Shanghai\u0026#34;) private Date birthDate; @JsonFormat(pattern = \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;) private LocalDateTime createTime; } 序列化指将前端传来的json对象转化成java对象\n反序列化则相反\n3. 使用@DateTimeFormat注解 适用场景：处理表单提交或@RequestParam的参数绑定（仅反序列化）\n支持类型：Date、Calendar、java.time.*\npublic class Event { @DateTimeFormat(pattern = \u0026#34;dd-MM-yyyy\u0026#34;) private Date eventDate; } 注意：此注解不影响JSON序列化（返回给前端的格式），需配合@JsonFormat使用。\n4. 自定义全局ObjectMapper 适用场景：完全控制Jackson的日期序列化行为\nimport com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule; import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; @Configuration public class JacksonConfig { @Bean public ObjectMapper objectMapper() { ObjectMapper mapper = new ObjectMapper(); // 配置Java 8日期时间类型序列化 JavaTimeModule javaTimeModule = new JavaTimeModule(); javaTimeModule.addSerializer( LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd HH:ss\u0026#34;)) ); mapper.registerModule(javaTimeModule); mapper.setDateFormat(DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;)); mapper.setTimeZone(TimeZone.getTimeZone(\u0026#34;GMT+8\u0026#34;)); return mapper; } } 5. 实现Converter接口 适用场景：处理控制器参数绑定（如@RequestParam、@PathVariable）\nimport org.springframework.core.convert.converter.Converter; import org.springframework.stereotype.Component; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; @Component public class StringToDateConverter implements Converter\u0026lt;String, Date\u0026gt; { private final SimpleDateFormat format = new SimpleDateFormat(\u0026#34;yyyy|MM|dd\u0026#34;); @Override public Date convert(String source) { try { return format.parse(source); } catch (ParseException e) { throw new IllegalArgumentException(\u0026#34;日期格式无效: \u0026#34; + source); } } } 6. 自定义Formatter 适用场景：同时处理序列化与反序列化（如Thymeleaf页面渲染）\nimport org.springframework.format.Formatter; import java.text.ParseException; import java.time.LocalDate; import java.time.format.DateTimeFormatter; import java.util.Locale; public class LocalDateFormatter implements Formatter\u0026lt;LocalDate\u0026gt; { private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy/MM/dd\u0026#34;); @Override public LocalDate parse(String text, Locale locale) throws ParseException { return LocalDate.parse(text, formatter); } @Override public String print(LocalDate object, Locale locale) { return object.format(formatter); } } 注册Formatter：\nimport org.springframework.context.annotation.Configuration; import org.springframework.format.FormatterRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration public class WebConfig implements WebMvcConfigurer { @Override public void addFormatters(FormatterRegistry registry) { registry.addFormatter(new LocalDateFormatter()); } } 7. ObjectMapper定制器 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule; import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer; import org.springframework.boot.autoconfigure.AutoConfiguration; import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer; import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; import org.springframework.context.annotation.Bean; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.Date; import java.util.TimeZone; @AutoConfiguration(before = JacksonAutoConfiguration.class) public class JacksonConfig { @Bean public Jackson2ObjectMapperBuilderCustomizer customizer() { return builder -\u0026gt; { // 全局配置序列化返回 JSON 处理 JavaTimeModule javaTimeModule = new JavaTimeModule(); DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(formatter)); builder.modules(javaTimeModule); builder.timeZone(TimeZone.getDefault()); }; } } 8. 消息转化器 import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.SerializationFeature; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule; import org.springframework.context.annotation.Configuration; import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration public class WebConfig implements WebMvcConfigurer { @Override public void configureMessageConverters(List\u0026lt;HttpMessageConverter\u0026lt;?\u0026gt;\u0026gt; converters) { Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder() .indentOutput(true) .dateFormat(new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;)) .modules(new JavaTimeModule()); // 添加Java 8日期时间模块支持 converters.add(new MappingJackson2HttpMessageConverter(builder.build())); } } 个人一般使用ObjectMapper定制器\n","date":"2024-06-01 08:00:00","updated":"2024-06-01 08:00:00"},{"objectID":"a319fdfdb1ce77c4ed71e06e794634eb959b7a2b","permalink":"/post/vscode%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BD%A2%E5%BA%93%E7%8E%AF%E5%A2%83/","title":"vscode配置图形库环境","content":"vscode下载这一个扩展 ","date":"2024-06-01 08:00:00","updated":"2024-06-01 08:00:00"}]