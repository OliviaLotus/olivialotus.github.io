<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lotus</title><link>https://example.org/algolia.json</link><description>Recent content from Lotus</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>xxx@example.com (OliviaLotus)</managingEditor><webMaster>xxx@example.com (OliviaLotus)</webMaster><copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright><lastBuildDate>Sun, 01 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>java教程(3)-变量与数据类型</title><link>https://example.org/post/25-06-01-java%E6%95%99%E7%A8%8B3-%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E4%BB%8Ejava%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B3-%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/25-06-01-java%E6%95%99%E7%A8%8B3-%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E4%BB%8Ejava%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B3-%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>
<![CDATA[<h1>java教程(3)-变量与数据类型</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="解释代码">
<a class="header-anchor" href="#%e8%a7%a3%e9%87%8a%e4%bb%a3%e7%a0%81"></a>
解释代码
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">App</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Hello, World!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>这段是项目初始代码,这些代码没学过的应该不知道什么意思,但是不需要在意.</p>
<p>循序渐进即可.</p>
<p>我们重点关注这行代码:<strong><code>System.out.println(&quot;Hello, World!&quot;);</code></strong></p>
        
        <hr><p>本文2025-06-01首发于<a href='https://example.org/'>Lotus</a>，最后修改于2025-06-01</p>]]></description><category>java</category></item><item><title>java教程(2)-程序执行流程</title><link>https://example.org/post/25-05-29-java%E6%95%99%E7%A8%8B2-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/25-05-29-java%E6%95%99%E7%A8%8B2-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid><description>
<![CDATA[<h1>java教程(2)-程序执行流程</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="运行流程">
<a class="header-anchor" href="#%e8%bf%90%e8%a1%8c%e6%b5%81%e7%a8%8b"></a>
运行流程
</h2><p>下面的内容有些词听不懂没关系,只要明白是一些 jdk 文件夹里的程序在起作用即可.
当我们点击右上角的小三角后</p>
<h3 id="vscode-检测-java-环境">
<a class="header-anchor" href="#vscode-%e6%a3%80%e6%b5%8b-java-%e7%8e%af%e5%a2%83"></a>
VSCode 检测 Java 环境
</h3><p>VSCode 会通过配置的 JDK 环境变量来确认 Java 开发环境是否可用。也就是 vscode 会优先从系统变量里找<code>javahome</code>(大小写无所谓)变量,但是我们并没有配置,先前只是配置 path 变量里的可执行文件路径而已,所以我们手动在 vscode 的设置里配置了<code>javahome</code>的路径.
如果环境变量配置有问题，VSCode 会提示你重新配置 JDK 路径。(也就是报错)</p>
        
        <hr><p>本文2025-05-29首发于<a href='https://example.org/'>Lotus</a>，最后修改于2025-05-29</p>]]></description><category>java</category></item><item><title>java教程(1)-配置环境</title><link>https://example.org/post/25-04-20-java%E6%95%99%E7%A8%8B1-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</link><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/25-04-20-java%E6%95%99%E7%A8%8B1-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</guid><description>
<![CDATA[<h1>java教程(1)-配置环境</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="配置-java-环境">
<a class="header-anchor" href="#%e9%85%8d%e7%bd%ae-java-%e7%8e%af%e5%a2%83"></a>
配置 java 环境
</h2><p>jdk 有很多版本,对教学来说区别甚微</p>
<p>以<strong>openjdk17</strong>作为 java 环境</p>
<p>从<a href="https://mirrors.tuna.tsinghua.edu.cn/Adoptium/17/jdk/x64/windows/">清华源镜像</a>下载 jdk
<img src="/post/25-04-20-java%E6%95%99%E7%A8%8B1-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/2025-05-27-21-22-44.png" alt="">
将下载的 zip 解压,我喜欢用一个目录专门存放开发环境和工具</p>
<p><strong>电脑小白可以去看下<a href="https://www.bilibili.com/video/BV1VV4y1U7Kn/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1e6d81bbe21aa9ec935a4fe907b05d20">windows 教程</a></strong></p>
        
        <hr><p>本文2025-04-20首发于<a href='https://example.org/'>Lotus</a>，最后修改于2025-04-20</p>]]></description><category>java</category></item><item><title>java基础学生管理系统</title><link>https://example.org/post/25-04-19-%E5%AD%A6java%E5%9F%BA%E7%A1%80%E6%97%B6%E9%9A%BE%E5%A6%82%E7%99%BB%E5%A4%A9%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/25-04-19-%E5%AD%A6java%E5%9F%BA%E7%A1%80%E6%97%B6%E9%9A%BE%E5%A6%82%E7%99%BB%E5%A4%A9%E7%9A%84%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid><description>
<![CDATA[<h1>java基础学生管理系统</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <blockquote>
<p>一个十分简单的称不上项目的学习项目</p>
<p>但是当时阅历不够做起来也是磕磕碰碰断断续续</p></blockquote>
<h2 id="一项目概述">
<a class="header-anchor" href="#%e4%b8%80%e9%a1%b9%e7%9b%ae%e6%a6%82%e8%bf%b0"></a>
一、项目概述
</h2><p><strong>目标</strong>：实现一个基于控制台的“学生信息管理系统”，支持以下功能：</p>
        
        <hr><p>本文2025-04-19首发于<a href='https://example.org/'>Lotus</a>，最后修改于2025-04-19</p>]]></description><category>java</category></item><item><title>vue3 常用的几种组件通讯方式</title><link>https://example.org/post/24-10-03-vue3-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/24-10-03-vue3-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</guid><description>
<![CDATA[<h1>vue3 常用的几种组件通讯方式</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="一父子组件通信">
<a class="header-anchor" href="#%e4%b8%80%e7%88%b6%e5%ad%90%e7%bb%84%e4%bb%b6%e9%80%9a%e4%bf%a1"></a>
一、父子组件通信
</h2><h3 id="1-props-向下传递">
<a class="header-anchor" href="#1-props-%e5%90%91%e4%b8%8b%e4%bc%a0%e9%80%92"></a>
1. Props 向下传递
</h3><p>这是 Vue 中最基础的父子组件通信方式。父组件通过 <code>props</code> 将数据传递给子组件。</p>
<p><strong>父组件：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ChildComponent</span> <span class="nt">:message</span><span class="o">=</span><span class="s">&#34;parentMessage&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">setup</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">ref</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ChildComponent</span> <span class="nx">from</span> <span class="s1">&#39;./ChildComponent.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parentMessage</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">(</span><span class="s1">&#39;Hello from Parent&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><strong>子组件：</strong></p>
        
        <hr><p>本文2024-10-03首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-10-03</p>]]></description><category>javascript</category></item><item><title>TypeORM create方法的类型推断问题</title><link>https://example.org/post/24-09-02-typeorm-create-%E6%96%B9%E6%B3%95%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/24-09-02-typeorm-create-%E6%96%B9%E6%B3%95%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E9%97%AE%E9%A2%98/</guid><description>
<![CDATA[<h1>TypeORM create方法的类型推断问题</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="问题描述">
<a class="header-anchor" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0"></a>
问题描述
</h2><p>今天从AI那里复制了一段代码,逻辑看起来没有问题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@nestjs/common&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">InjectRepository</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@nestjs/typeorm&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Repository</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;typeorm&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">User</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;./entities/user.entity&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="o">*</span> <span class="kr">as</span> <span class="nx">bcrypt</span> <span class="kr">from</span> <span class="s1">&#39;bcryptjs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">@Injectable</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">class</span> <span class="nx">UserService</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="kd">@InjectRepository</span><span class="p">(</span><span class="nx">User</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">private</span> <span class="nx">userRepository</span>: <span class="kt">Repository</span><span class="p">&lt;</span><span class="nt">User</span><span class="p">&gt;,</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">async</span> <span class="nx">createUser</span><span class="p">(</span><span class="nx">userData</span>: <span class="kt">any</span><span class="p">)</span><span class="o">:</span> <span class="nx">Promise</span><span class="p">&lt;</span><span class="nt">User</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">hashedPassword</span> <span class="o">=</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">hashSync</span><span class="p">(</span><span class="nx">userData</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="p">...</span><span class="nx">userData</span><span class="p">,</span> <span class="nx">password</span>: <span class="kt">hashedPassword</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然而，VSCode 或 TypeScript 编译器可能会报错，提示 <code>create</code> 方法返回的是一个数组，而不是单个 <code>User</code> 对象。<strong>我人佛了</strong>传个对象，还给我推出数组来了。</p>
        
        <hr><p>本文2024-09-02首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-09-02</p>]]></description><category>javascript</category></item><item><title>新建vue项目的最佳实践</title><link>https://example.org/post/24-08-25-%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/24-08-25-%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
<![CDATA[<h1>新建vue项目的最佳实践</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="vite-初始化">
<a class="header-anchor" href="#vite-%e5%88%9d%e5%a7%8b%e5%8c%96"></a>
Vite 初始化
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pnpm create vite
</span></span></code></pre></div><table>
  <thead>
      <tr>
          <th>选项</th>
          <th>内容</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Project name:</td>
          <td>vite-project(自定义)</td>
      </tr>
      <tr>
          <td>Select a framework:</td>
          <td>Vue</td>
      </tr>
      <tr>
          <td>Select a variant:</td>
          <td>Official Vue Starter</td>
      </tr>
      <tr>
          <td>请选择要包含的功能：</td>
          <td>TypeScript, Router（单页面应用开发）, Pinia（状态管理）, Vitest（单元测试）, ESLint（错误预防）, Prettier（代码格式化）</td>
      </tr>
      <tr>
          <td>选择要包含的试验特性：</td>
          <td>none</td>
      </tr>
  </tbody>
</table>
<p>之后执行：</p>
        
        <hr><p>本文2024-08-25首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-08-25</p>]]></description><category>javascript</category></item><item><title>Pure-Admin-http工具类解析</title><link>https://example.org/post/24-08-19-pure-admin-http%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/24-08-19-pure-admin-http%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%A7%A3%E6%9E%90/</guid><description>
<![CDATA[<h1>Pure-Admin-http工具类解析</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="typesdts类型定义">
<a class="header-anchor" href="#typesdts%e7%b1%bb%e5%9e%8b%e5%ae%9a%e4%b9%89"></a>
types.d.ts类型定义
</h2><h3 id="1-引入类型">
<a class="header-anchor" href="#1-%e5%bc%95%e5%85%a5%e7%b1%bb%e5%9e%8b"></a>
1. 引入类型
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">import</span> <span class="kr">type</span> <span class="p">{</span> <span class="nx">Method</span><span class="p">,</span> <span class="nx">AxiosError</span><span class="p">,</span> <span class="nx">AxiosResponse</span><span class="p">,</span> <span class="nx">AxiosRequestConfig</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;axios&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>从 <code>axios</code> 里引入了一些类型，后面会用到。比如：</p>
<ul>
<li><code>Method</code>：HTTP 方法（get、post、put&hellip;）</li>
<li><code>AxiosError</code>：请求错误类型</li>
<li><code>AxiosResponse</code>：响应类型</li>
<li><code>AxiosRequestConfig</code>：请求配置类型</li>
</ul>
<hr>
<h3 id="2-定义响应数据结构">
<a class="header-anchor" href="#2-%e5%ae%9a%e4%b9%89%e5%93%8d%e5%ba%94%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"></a>
2. 定义响应数据结构
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">type</span> <span class="nx">resultType</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">accessToken?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>这只是一个示例类型，表示接口返回的数据结构里可能有一个 <code>accessToken</code> 字段，实际项目里你可以换成你自己的。(删了也行)</p>
        
        <hr><p>本文2024-08-19首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-08-19</p>]]></description><category>javascript</category></item><item><title>JS作用域链、闭包</title><link>https://example.org/post/24-08-17-js%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E9%97%AD%E5%8C%85/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/24-08-17-js%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E9%97%AD%E5%8C%85/</guid><description>
<![CDATA[<h1>JS作用域链、闭包</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="1-作用域链一层层抽屉找变量">
<a class="header-anchor" href="#1-%e4%bd%9c%e7%94%a8%e5%9f%9f%e9%93%be%e4%b8%80%e5%b1%82%e5%b1%82%e6%8a%bd%e5%b1%89%e6%89%be%e5%8f%98%e9%87%8f"></a>
1. 作用域链：一层层抽屉找变量
</h2><h3 id="11-作用域scope">
<a class="header-anchor" href="#11-%e4%bd%9c%e7%94%a8%e5%9f%9fscope"></a>
1.1 作用域（Scope）
</h3><p>作用域就是“变量能起作用的范围”。JS 只有三种作用域：</p>
<ul>
<li><strong>全局作用域</strong>：最外层抽屉，整个房间都能访问。</li>
<li><strong>函数作用域</strong>：函数内部专属抽屉，函数外访问不到。</li>
<li><strong>块级作用域</strong>（ES6）：<code>let/const</code> 一对大括号 <code>{}</code> 就是一个抽屉，比 <code>var</code> 更精细。</li>
</ul>
<h3 id="12-作用域链scope-chain">
<a class="header-anchor" href="#12-%e4%bd%9c%e7%94%a8%e5%9f%9f%e9%93%bescope-chain"></a>
1.2 作用域链（Scope Chain）
</h3><p>当代码要取一个变量时，引擎会从<strong>当前抽屉</strong>开始一层层往外翻，直到全局抽屉为止，这条翻抽屉的路径就叫“作用域链”。</p>
        
        <hr><p>本文2024-08-17首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-08-17</p>]]></description><category>javascript</category></item><item><title>JS原型链</title><link>https://example.org/post/24-08-17-js%E5%8E%9F%E5%9E%8B%E9%93%BE/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/24-08-17-js%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid><description>
<![CDATA[<h1>JS原型链</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h3 id="1-基本概念">
<a class="header-anchor" href="#1-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5"></a>
1. 基本概念
</h3><p>在 JavaScript 中，每个对象都有一个内部属性 <code>[[Prototype]]</code>，通常通过 <code>__proto__</code> 属性或者 <code>Object.getPrototypeOf()</code> 方法来访问。这个属性指向另一个对象，称为该对象的“原型”。如果在对象上查找某个属性或方法时，自身不存在，则会沿着原型链向上查找。</p>
        
        <hr><p>本文2024-08-17首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-08-17</p>]]></description><category>javascript</category></item></channel></rss>