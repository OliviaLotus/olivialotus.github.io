<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue on Lotus</title><link>https://example.org/tags/vue/</link><description>Recent content from Lotus</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>xxx@example.com (OliviaLotus)</managingEditor><webMaster>xxx@example.com (OliviaLotus)</webMaster><copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright><lastBuildDate>Thu, 03 Oct 2024 08:00:00 +0000</lastBuildDate><atom:link href="https://example.org/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>vue3 常用的几种组件通讯方式</title><link>https://example.org/post/vue3-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 03 Oct 2024 08:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/vue3-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</guid><description>
<![CDATA[<h1>vue3 常用的几种组件通讯方式</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="一父子组件通信">
<a class="header-anchor" href="#%e4%b8%80%e7%88%b6%e5%ad%90%e7%bb%84%e4%bb%b6%e9%80%9a%e4%bf%a1"></a>
一、父子组件通信
</h2><h3 id="1-props-向下传递">
<a class="header-anchor" href="#1-props-%e5%90%91%e4%b8%8b%e4%bc%a0%e9%80%92"></a>
1. Props 向下传递
</h3><p>这是 Vue 中最基础的父子组件通信方式。父组件通过 <code>props</code> 将数据传递给子组件。</p>
<p><strong>父组件：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">ChildComponent</span> <span class="nt">:message</span><span class="o">=</span><span class="s">&#34;parentMessage&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ChildComponent</span> <span class="nx">from</span> <span class="s1">&#39;./ChildComponent.vue&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ChildComponent</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">parentMessage</span><span class="o">:</span> <span class="s1">&#39;Hello from Parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><strong>子组件：</strong></p>
        
        <hr><p>本文2024-10-03首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-10-03</p>]]></description><category>vue</category></item><item><title>新建vue项目的最佳实践</title><link>https://example.org/post/%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 25 Jun 2024 08:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>
<![CDATA[<h1>新建vue项目的最佳实践</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="vite-初始化">
<a class="header-anchor" href="#vite-%e5%88%9d%e5%a7%8b%e5%8c%96"></a>
Vite 初始化
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pnpm create vite
</span></span></code></pre></div><table>
  <thead>
      <tr>
          <th>选项</th>
          <th>内容</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Project name:</td>
          <td>vite-project(自定义)</td>
      </tr>
      <tr>
          <td>Select a framework:</td>
          <td>Vue</td>
      </tr>
      <tr>
          <td>Select a variant:</td>
          <td>Official Vue Starter</td>
      </tr>
      <tr>
          <td>请选择要包含的功能：</td>
          <td>TypeScript, Router（单页面应用开发）, Pinia（状态管理）, Vitest（单元测试）, ESLint（错误预防）, Prettier（代码格式化）</td>
      </tr>
      <tr>
          <td>选择要包含的试验特性：</td>
          <td>none</td>
      </tr>
  </tbody>
</table>
<p>之后执行：</p>
        
        <hr><p>本文2024-06-25首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-06-25</p>]]></description><category>vue</category></item><item><title>Pure-Admin-http工具类解析</title><link>https://example.org/post/pure-admin-http%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%A7%A3%E6%9E%90/</link><pubDate>Wed, 19 Jun 2024 08:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/pure-admin-http%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%A7%A3%E6%9E%90/</guid><description>
<![CDATA[<h1>Pure-Admin-http工具类解析</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h2 id="typesdts类型定义">
<a class="header-anchor" href="#typesdts%e7%b1%bb%e5%9e%8b%e5%ae%9a%e4%b9%89"></a>
types.d.ts类型定义
</h2><h3 id="1-引入类型">
<a class="header-anchor" href="#1-%e5%bc%95%e5%85%a5%e7%b1%bb%e5%9e%8b"></a>
1. 引入类型
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">import</span> <span class="kr">type</span> <span class="p">{</span> <span class="nx">Method</span><span class="p">,</span> <span class="nx">AxiosError</span><span class="p">,</span> <span class="nx">AxiosResponse</span><span class="p">,</span> <span class="nx">AxiosRequestConfig</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;axios&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>从 <code>axios</code> 里引入了一些类型，后面会用到。比如：</p>
<ul>
<li><code>Method</code>：HTTP 方法（get、post、put&hellip;）</li>
<li><code>AxiosError</code>：请求错误类型</li>
<li><code>AxiosResponse</code>：响应类型</li>
<li><code>AxiosRequestConfig</code>：请求配置类型</li>
</ul>
<hr>
<h3 id="2-定义响应数据结构">
<a class="header-anchor" href="#2-%e5%ae%9a%e4%b9%89%e5%93%8d%e5%ba%94%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"></a>
2. 定义响应数据结构
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">type</span> <span class="nx">resultType</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">accessToken?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>这只是一个示例类型，表示接口返回的数据结构里可能有一个 <code>accessToken</code> 字段，实际项目里你可以换成你自己的。(删了也行)</p>
        
        <hr><p>本文2024-06-19首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-06-19</p>]]></description><category>vue</category></item><item><title>TS泛型与符号速查</title><link>https://example.org/post/ts%E6%B3%9B%E5%9E%8B%E4%B8%8E%E7%AC%A6%E5%8F%B7%E9%80%9F%E6%9F%A5/</link><pubDate>Mon, 17 Jun 2024 08:00:00 +0000</pubDate><author>xxx@example.com (OliviaLotus)</author><guid>https://example.org/post/ts%E6%B3%9B%E5%9E%8B%E4%B8%8E%E7%AC%A6%E5%8F%B7%E9%80%9F%E6%9F%A5/</guid><description>
<![CDATA[<h1>TS泛型与符号速查</h1><p>作者：OliviaLotus（xxx@example.com）</p>
        
          <h3 id="1-占位符--默认值">
<a class="header-anchor" href="#1-%e5%8d%a0%e4%bd%8d%e7%ac%a6--%e9%bb%98%e8%ae%a4%e5%80%bc"></a>
1. 占位符 &amp; 默认值
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// 占位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">id</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;(</span><span class="nx">x</span>: <span class="kt">T</span><span class="p">)</span><span class="o">:</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">id</span><span class="p">&lt;</span><span class="nt">number</span><span class="p">&gt;(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">// T 被替换成 number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 带默认值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">ApiResp</span><span class="p">&lt;</span><span class="nt">T</span> <span class="err">=</span> <span class="na">any</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">code</span>: <span class="kt">number</span><span class="p">;</span> <span class="nx">data</span>: <span class="kt">T</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">UserResp</span> <span class="o">=</span> <span class="nx">ApiResp</span><span class="p">&lt;</span><span class="nt">User</span><span class="p">&gt;;</span> <span class="c1">// 指定类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">AnyResp</span> <span class="o">=</span> <span class="nx">ApiResp</span><span class="p">;</span> <span class="c1">// 默认 any
</span></span></span></code></pre></div><hr>
<h3 id="2-约束--多参数">
<a class="header-anchor" href="#2-%e7%ba%a6%e6%9d%9f--%e5%a4%9a%e5%8f%82%e6%95%b0"></a>
2. 约束 &amp; 多参数
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// 约束：参数必须带 length属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">len</span><span class="p">&lt;</span><span class="nt">T</span> <span class="na">extends</span> <span class="p">{</span> <span class="na">length</span><span class="err">:</span> <span class="na">number</span> <span class="p">}&gt;(</span><span class="nx">arr</span>: <span class="kt">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">len</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// OK
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">len</span><span class="p">({</span> <span class="nx">length</span>: <span class="kt">10</span> <span class="p">});</span> <span class="c1">// OK
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">len</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span> <span class="c1">// 报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 多参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Pair</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">,</span> <span class="na">U</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">first</span>: <span class="kt">T</span><span class="p">;</span> <span class="nx">second</span>: <span class="kt">U</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">NumStr</span> <span class="o">=</span> <span class="nx">Pair</span><span class="p">&lt;</span><span class="nt">number</span><span class="p">,</span> <span class="na">string</span><span class="p">&gt;;</span> <span class="c1">// { first: number; second: string }
</span></span></span></code></pre></div><hr>
<h3 id="3-条件类型ifelse">
<a class="header-anchor" href="#3-%e6%9d%a1%e4%bb%b6%e7%b1%bb%e5%9e%8bifelse"></a>
3. 条件类型（if/else）
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">IsString</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kr">extends</span> <span class="kt">string</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">A</span> <span class="o">=</span> <span class="nx">IsString</span><span class="o">&lt;</span><span class="s2">&#34;hi&#34;</span><span class="o">&gt;</span><span class="p">;</span> <span class="c1">// true
</span></span></span></code></pre></div><hr>
<h3 id="4-infer--把类型抠出来">
<a class="header-anchor" href="#4-infer--%e6%8a%8a%e7%b1%bb%e5%9e%8b%e6%8a%a0%e5%87%ba%e6%9d%a5"></a>
4. infer —— 把类型「抠」出来
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// 剥 Promise
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Unwrap</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kr">extends</span> <span class="nx">Promise</span><span class="p">&lt;</span><span class="nt">infer</span> <span class="na">U</span><span class="p">&gt;</span> <span class="o">?</span> <span class="nx">U</span> : <span class="kt">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Data</span> <span class="o">=</span> <span class="nx">Unwrap</span><span class="p">&lt;</span><span class="nt">Promise</span><span class="p">&lt;</span><span class="nt">User</span><span class="err">[]</span><span class="p">&gt;&gt;;</span> <span class="c1">// User[]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 剥数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Item</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kr">extends</span> <span class="p">(</span><span class="k">infer</span> <span class="nx">I</span><span class="p">)[]</span> <span class="o">?</span> <span class="nx">I</span> : <span class="kt">never</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">I</span> <span class="o">=</span> <span class="nx">Item</span><span class="p">&lt;</span><span class="nt">number</span><span class="err">[]</span><span class="p">&gt;;</span> <span class="c1">// number
</span></span></span></code></pre></div><hr>
<h3 id="5-映射类型批量改造对象">
<a class="header-anchor" href="#5-%e6%98%a0%e5%b0%84%e7%b1%bb%e5%9e%8b%e6%89%b9%e9%87%8f%e6%94%b9%e9%80%a0%e5%af%b9%e8%b1%a1"></a>
5. 映射类型（批量改造对象）
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// 全可选
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">MyPartial</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">K</span> <span class="k">in</span> <span class="k">keyof</span> <span class="nx">T</span><span class="p">]</span><span class="o">?:</span> <span class="nx">T</span><span class="p">[</span><span class="nx">K</span><span class="p">]</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 全只读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">MyReadonly</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span> <span class="kr">readonly</span> <span class="p">[</span><span class="nx">K</span> <span class="k">in</span> <span class="k">keyof</span> <span class="nx">T</span><span class="p">]</span><span class="o">:</span> <span class="nx">T</span><span class="p">[</span><span class="nx">K</span><span class="p">]</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 全可 null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Nullable</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">K</span> <span class="k">in</span> <span class="k">keyof</span> <span class="nx">T</span><span class="p">]</span><span class="o">:</span> <span class="nx">T</span><span class="p">[</span><span class="nx">K</span><span class="p">]</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">};</span>
</span></span></code></pre></div><hr>
<h3 id="6-递归映射深层工具">
<a class="header-anchor" href="#6-%e9%80%92%e5%bd%92%e6%98%a0%e5%b0%84%e6%b7%b1%e5%b1%82%e5%b7%a5%e5%85%b7"></a>
6. 递归映射（深层工具）
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">DeepPartial</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">K</span> <span class="k">in</span> <span class="k">keyof</span> <span class="nx">T</span><span class="p">]</span><span class="o">?:</span> <span class="nx">T</span><span class="p">[</span><span class="nx">K</span><span class="p">]</span> <span class="kr">extends</span> <span class="kt">object</span>
</span></span><span class="line"><span class="cl">    <span class="o">?</span> <span class="nx">DeepPartial</span><span class="p">&lt;</span><span class="nt">T</span><span class="err">[</span><span class="na">K</span><span class="err">]</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:</span> <span class="nx">T</span><span class="p">[</span><span class="nx">K</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Config</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">db</span><span class="o">:</span> <span class="p">{</span> <span class="nx">host</span>: <span class="kt">string</span><span class="p">;</span> <span class="nx">port</span>: <span class="kt">number</span> <span class="p">};</span> <span class="nx">cache</span>: <span class="kt">boolean</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Patch</span> <span class="o">=</span> <span class="nx">DeepPartial</span><span class="p">&lt;</span><span class="nt">Config</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Patch === { db?: { host?: string; port?: number }; cache?: boolean }
</span></span></span></code></pre></div><hr>
<h3 id="7-索引访问">
<a class="header-anchor" href="#7-%e7%b4%a2%e5%bc%95%e8%ae%bf%e9%97%ae"></a>
7. 索引访问
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">id</span>: <span class="kt">number</span><span class="p">;</span> <span class="nx">name</span>: <span class="kt">string</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Id</span> <span class="o">=</span> <span class="nx">User</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span> <span class="c1">// number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">AllVals</span> <span class="o">=</span> <span class="nx">User</span><span class="p">[</span><span class="k">keyof</span> <span class="nx">User</span><span class="p">];</span> <span class="c1">// number | string
</span></span></span></code></pre></div><hr>
<h3 id="8-as-const--typeof-组合">
<a class="header-anchor" href="#8-as-const--typeof-%e7%bb%84%e5%90%88"></a>
8. as const + typeof 组合
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span><span class="c1">// 推导成 number[]，元素可以是任意数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="kr">as</span> <span class="kr">const</span><span class="p">;</span><span class="c1">// 推导成 readonly [1, 2, 3]，长度固定，值也固定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ROUTES</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">login</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">logout</span><span class="o">:</span> <span class="s1">&#39;/logout&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">as</span> <span class="kr">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">RouteKeys</span> <span class="o">=</span> <span class="k">keyof</span> <span class="k">typeof</span> <span class="nx">ROUTES</span><span class="p">;</span> <span class="c1">// &#34;login&#34; | &#34;logout&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">RouteValues</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">ROUTES</span><span class="p">[</span><span class="nx">RouteKeys</span><span class="p">];</span> <span class="c1">// &#34;/login&#34; | &#34;/logout&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1">// 简化:type Routes = (typeof ROUTES)[keyof typeof ROUTES];
</span></span></span></code></pre></div><hr>
<h3 id="9-模板字符串字面量">
<a class="header-anchor" href="#9-%e6%a8%a1%e6%9d%bf%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%ad%97%e9%9d%a2%e9%87%8f"></a>
9. 模板字符串字面量
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Route</span> <span class="o">=</span> <span class="sb">`/api/</span><span class="si">${</span><span class="kt">string</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span> <span class="c1">// 只能是 &#34;/api/xxx&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Method</span> <span class="o">=</span> <span class="sb">`GET </span><span class="si">${</span><span class="nx">Route</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span> <span class="c1">// &#34;GET /api/xxx&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Resource</span> <span class="o">=</span> <span class="s1">&#39;users&#39;</span> <span class="o">|</span> <span class="s1">&#39;posts&#39;</span> <span class="o">|</span> <span class="s1">&#39;comments&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">ApiPath</span> <span class="o">=</span> <span class="sb">`/api/</span><span class="si">${</span><span class="nx">Resource</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 效果：&#34;/api/users&#34; | &#34;/api/posts&#34; | &#34;/api/comments&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ROUTES</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">login</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">logout</span><span class="o">:</span> <span class="s1">&#39;/logout&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">as</span> <span class="kr">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">RouteKeys</span> <span class="o">=</span> <span class="k">keyof</span> <span class="k">typeof</span> <span class="nx">ROUTES</span><span class="p">;</span> <span class="c1">// &#34;login&#34; | &#34;logout&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">ApiRoutes</span> <span class="o">=</span> <span class="sb">`/api</span><span class="si">${</span><span class="k">typeof</span> <span class="nx">ROUTES</span><span class="p">[</span><span class="nx">RouteKeys</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// &#34;/api/login&#34; | &#34;/api/logout&#34;
</span></span></span></code></pre></div><hr>
<h3 id="10-可变元组函数重载终结者">
<a class="header-anchor" href="#10-%e5%8f%af%e5%8f%98%e5%85%83%e7%bb%84%e5%87%bd%e6%95%b0%e9%87%8d%e8%bd%bd%e7%bb%88%e7%bb%93%e8%80%85"></a>
10. 可变元组（函数重载终结者）
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// 取数组尾巴
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Tail</span><span class="p">&lt;</span><span class="nt">T</span> <span class="na">extends</span> <span class="na">unknown</span><span class="err">[]</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kr">extends</span> <span class="p">[</span><span class="kt">any</span><span class="p">,</span> <span class="p">...</span><span class="k">infer</span> <span class="nx">Rest</span><span class="p">]</span> <span class="o">?</span> <span class="nx">Rest</span> : <span class="kt">never</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">T1</span> <span class="o">=</span> <span class="nx">Tail</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>   <span class="c1">// [2, 3, 4]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">T2</span> <span class="o">=</span> <span class="nx">Tail</span><span class="o">&lt;</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>          <span class="c1">// []
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">T3</span> <span class="o">=</span> <span class="nx">Tail</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>             <span class="c1">// never（匹配失败）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 可变参数转数组类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">type</span> <span class="nx">Parameters</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">T</span> <span class="kr">extends</span> <span class="p">(...</span><span class="nx">args</span>: <span class="kt">infer</span> <span class="nx">P</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kt">any</span> <span class="o">?</span> <span class="nx">P</span> : <span class="kt">never</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Fn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span>: <span class="kt">number</span><span class="p">,</span> <span class="nx">b</span>: <span class="kt">string</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span>: <span class="kt">boolean</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">type</span> <span class="nx">Args</span> <span class="o">=</span> <span class="nx">Parameters</span><span class="p">&lt;</span><span class="nt">Fn</span><span class="p">&gt;;</span> <span class="c1">// =&gt; [number, string, ...boolean[]]
</span></span></span></code></pre></div><hr>
<h3 id="11-内置工具泛型">
<a class="header-anchor" href="#11-%e5%86%85%e7%bd%ae%e5%b7%a5%e5%85%b7%e6%b3%9b%e5%9e%8b"></a>
11. 内置工具泛型
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="nx">Partial</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;;</span> <span class="c1">// 全可选
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Required</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;;</span> <span class="c1">// 全必选
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Readonly</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;;</span> <span class="c1">// 全只读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Record</span><span class="p">&lt;</span><span class="nt">K</span><span class="p">,</span> <span class="na">T</span><span class="p">&gt;;</span> <span class="c1">// { [P in K]: T }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Pick</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">,</span> <span class="na">K</span><span class="p">&gt;;</span> <span class="c1">// 只留 K 里的键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Omit</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">,</span> <span class="na">K</span><span class="p">&gt;;</span> <span class="c1">// 去掉 K 里的键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">NonNullable</span><span class="p">&lt;</span><span class="nt">T</span><span class="p">&gt;;</span> <span class="c1">// 去掉 null/undefined
</span></span></span></code></pre></div><hr>
<h3 id="12-符号速记表">
<a class="header-anchor" href="#12-%e7%ac%a6%e5%8f%b7%e9%80%9f%e8%ae%b0%e8%a1%a8"></a>
12. 符号速记表
</h3><table>
  <thead>
      <tr>
          <th>符号</th>
          <th>作用</th>
          <th>示例</th>
          <th>结果</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>&amp;</code></td>
          <td>交叉合并对象</td>
          <td><code>{a:string} &amp; {b:number}</code></td>
          <td><code>{a:string; b:number}</code></td>
      </tr>
      <tr>
          <td><code>|</code></td>
          <td>联合（或）</td>
          <td><code>string | number</code></td>
          <td>二者之一</td>
      </tr>
      <tr>
          <td><code>?</code></td>
          <td>可选属性</td>
          <td><code>{name?: string}</code></td>
          <td>name 可缺</td>
      </tr>
      <tr>
          <td><code>!</code></td>
          <td>非空断言</td>
          <td><code>el!.value</code></td>
          <td>告诉 TS 不为 null</td>
      </tr>
      <tr>
          <td><code>as</code></td>
          <td>类型断言</td>
          <td><code>x as HTMLElement</code></td>
          <td>强制转换</td>
      </tr>
      <tr>
          <td><code>keyof</code></td>
          <td>取键集合</td>
          <td><code>keyof {a:1,b:2}</code></td>
          <td><code>&quot;a&quot; | &quot;b&quot;</code></td>
      </tr>
      <tr>
          <td><code>typeof</code></td>
          <td>取变量类型</td>
          <td><code>typeof [1,2]</code></td>
          <td><code>number[]</code></td>
      </tr>
  </tbody>
</table>
        
        <hr><p>本文2024-06-17首发于<a href='https://example.org/'>Lotus</a>，最后修改于2024-06-17</p>]]></description><category>vue</category></item></channel></rss>